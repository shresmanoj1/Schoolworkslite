import 'dart:convert';import 'dart:developer';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:provider/provider.dart';import 'package:schoolworkspro_app/Screens/lecturer/my-modules/components/more_component/check_submission_view_model.dart';import 'package:schoolworkspro_app/api/repositories/lecturer/check_submission_repository.dart';import 'package:schoolworkspro_app/common_view_model.dart';import 'package:schoolworkspro_app/request/lecturer/student_homewor_marking_request.dart';import '../../../../../components/shimmer.dart';import '../../../../../config/api_response_config.dart';import '../../../../../constants/colors.dart';import '../../../../../response/lecturer/get_homework_response.dart';class CheckSubmission extends StatefulWidget {  final Task tasks;  final selected_batch;  const CheckSubmission(      {Key? key,      required this.tasks,      this.selected_batch,})      : super(key: key);  @override  _CheckSubmissionState createState() => _CheckSubmissionState();}class _CheckSubmissionState extends State<CheckSubmission> {  List<TextEditingController> _controllers = [];  List<String> _submitted = <String>[];  List<bool>? checkedValue = [];  late CheckSubmissionViewModel _checkSubmissionViewModel;  // bool value = false;  @override  void initState() {    // TODO: implement initState    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      var batch = widget.selected_batch.split(" ").join("%20");      _checkSubmissionViewModel = Provider.of<CheckSubmissionViewModel>(context, listen: false);      _checkSubmissionViewModel          .fetchStudentTask(widget.tasks.taskSlug.toString(),batch).then((value) {       for(int i = 0;i< _checkSubmissionViewModel.data.task!.students!.length;i++){         if(_checkSubmissionViewModel.data.task!.students![i].submitted == true){           _submitted.add(_checkSubmissionViewModel.data.task!.students![i].username ?? "");         }       }      });      _controllers.clear();    });    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text(          "Submission",          style: TextStyle(color: white),        ),        // backgroundColor: Colors.white,        elevation: 0.0,        iconTheme: const IconThemeData(color: white),      ),      body: Consumer<CheckSubmissionViewModel>(          builder: (context, submission, child) {        return isLoading(submission.studentMarkingApiResponse) ? const VerticalLoader() : submission.data.task != null            ? ListView(                padding: const EdgeInsets.symmetric(horizontal: 10),                children: [                  Column(                    children: [                      ListView.builder(                        shrinkWrap: true,                        physics: const ScrollPhysics(),                        itemCount:                            submission.data.task!.students!.length,                        itemBuilder: (context, index) {                          _controllers                              .add(TextEditingController(text: submission                                  .data.task!.students![index].feedback                                  .toString()));                          var username = submission                              .data.task!.students![index].username;                          // checkedValue?.add(false);                          return submission.data.task!.students !=                                  null                              ? Column(children: [                                  ListTile(                                    title:                                        Builder(builder: (context) {                                      var name =                                          "${submission.data.task!.students![index].firstname!} ${submission.data.task!.students![index].lastname!}";                                      return RichText(                                        text: TextSpan(                                          text: 'Name: ',                                          style: const TextStyle(                                              color: Colors.black,                                              fontWeight:                                                  FontWeight.bold),                                          children: <TextSpan>[                                            TextSpan(                                              text: name.toString(),                                              style: const TextStyle(                                                  color: Colors.black,                                                  fontWeight:                                                      FontWeight                                                          .normal),                                            ),                                          ],                                        ),                                      );                                    }),                                    trailing:                                    Checkbox(                                      // value: checkedValue![index],                                      value: _submitted                                          .contains(username),                                      activeColor: Colors.green,                                      onChanged: (value) {                                        setState(() {                                          if (_submitted                                              .contains(username)) {                                            _submitted                                                .remove(username);                                          } else {                                            _submitted.add(                                                username.toString());                                          }                                          // checkedValue= checkedValue![index]!;                                        });                                      },                                    ),                                    subtitle:                                        Builder(builder: (context) {                                      return RichText(                                        text: TextSpan(                                          text: 'Student ID: ',                                          style: const TextStyle(                                              color: Colors.black,                                              fontWeight:                                                  FontWeight.bold),                                          children: <TextSpan>[                                            TextSpan(                                              text: submission                                                      .data                                                      .task!                                                      .students![                                                          index]                                                      .username ??                                                  "N/A",                                              style: const TextStyle(                                                  color: Colors.black,                                                  fontWeight:                                                      FontWeight                                                          .normal),                                            ),                                          ],                                        ),                                      );                                    }),                                  ),                                  Padding(                                    padding:                                        const EdgeInsets.all(8.0),                                    child: TextFormField(                                      controller: _controllers[index],                                      keyboardType:                                          TextInputType.text,                                      decoration:                                           const InputDecoration(                                             contentPadding: EdgeInsets.symmetric(horizontal: 10),                                        hintText: "Feedback",                                        enabledBorder:                                             OutlineInputBorder(                                                borderSide:                                                    BorderSide(                                                        color: Colors                                                            .grey)),                                        focusedBorder:                                             OutlineInputBorder(                                                borderSide:                                                    BorderSide(                                                        color: Colors                                                            .green)),                                        floatingLabelBehavior:                                            FloatingLabelBehavior                                                .always,                                      ),                                    ),                                  ),                                ])                              : const SizedBox(                                  child:                                      Text('Students not Assigned'),                                );                        },                      ),                      submission.data.task!.students!.isNotEmpty ?                      ElevatedButton(                        style: ElevatedButton.styleFrom(                            primary: Colors.green),                        onPressed: () async {                          List<TaskStatus> taskRequest = [];                          for (var i = 0;                              i <                                  submission                                      .data.task!.students!.length;                              i++) {                            taskRequest.add(TaskStatus(                                firstname: submission.data.task!                                    .students![i].firstname,                                lastname: submission                                    .data.task!.students![i].lastname,                                username: submission                                    .data.task!.students![i].username,                                submitted: _submitted.contains(                                    submission.data.task!.students![i]                                        .username),                                select: false,                                feedback: _controllers[i].text));                          }                          final request =                              StudentHomeworkMarkingRequest(                            moduleSlug: widget.tasks.moduleSlug,                            batch: widget.selected_batch,                            taskStatus: taskRequest,                          );                          print(widget.tasks.moduleSlug);                          print(widget.selected_batch);                          inspect(request);                          final ress =                              await CheckSubmissionRepository()                                  .postStudentHomeworkMarking(                                      request,                                      submission.data.task!.taskSlug!                              .toString());                          if (ress.success == true) {                            Fluttertoast.showToast(                                msg: ress.message ??                                    "Marks has been submitted");                            Navigator.pop(context);                          } else {                            Fluttertoast.showToast(                                msg: ress.message ?? "Error");                          }                        },                        child: const Text("Save"),                      ) : SizedBox(),                      const SizedBox(                        height: 100,                      ),                    ],                  )                ],              )            : Image.asset("assets/images/no_content.PNG");      }),    );  }}