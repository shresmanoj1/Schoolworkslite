import 'dart:convert';import 'package:flutter/material.dart';import 'package:schoolworkspro_app/response/available_collaboration_response.dart';import 'package:schoolworkspro_app/response/collaboration_group_response.dart';import 'package:schoolworkspro_app/response/lecturer/getstudentformarking_response.dart';import '../../../api/api_response.dart';import '../../../api/repositories/collaboration_repo.dart';import '../../../response/collaboration_task_group_response.dart';import '../../../response/lecturer/getbatch_response.dart';class CollaborationViewModel extends ChangeNotifier {  ApiResponse _availableCollaborationApiResponse =      ApiResponse.initial("Empty Data");  ApiResponse get availableCollaborationApiResponse =>      _availableCollaborationApiResponse;  AvailableCollaborationResponse _availableCollaboration =      AvailableCollaborationResponse();  AvailableCollaborationResponse get availableCollaboration =>      _availableCollaboration;  Future<void> fetchAvailableCollaboration() async {    _availableCollaborationApiResponse =        ApiResponse.initial("Loading");    notifyListeners();    try {      AvailableCollaborationResponse res =          await CollaborationRepository().getAvailableCollaboration();      if (res.success == true) {        _availableCollaboration = res;        _availableCollaborationApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _availableCollaborationApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _availableCollaborationApiResponse =          ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _createGroupApiResponse =      ApiResponse.initial("Empty Data");  ApiResponse get createGroupApiResponse => _createGroupApiResponse;  CollaborationGroupResponse _createGroup =      CollaborationGroupResponse();  CollaborationGroupResponse get createGroup => _createGroup;  Future<void> fetchGroup(String id) async {    _createGroupApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      CollaborationGroupResponse res =          await CollaborationRepository().getGroup(id);      if (res.success == true) {        _createGroup = res;        _createGroupApiResponse = ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _createGroupApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _createGroupApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  // ApiResponse _batchStudentApiResponse =  //     ApiResponse.initial("Empty Data");  // ApiResponse get batchStudentApiResponse => _batchStudentApiResponse;  // GetStudentForMarkingResponse _batchStudent = GetStudentForMarkingResponse();  // GetStudentForMarkingResponse get batchStudent => _batchStudent;  //  // Future<void> fetchStudent(String batch) async {  //   _batchStudentApiResponse = ApiResponse.initial("Loading");  //   notifyListeners();  //   try {  //     GetStudentForMarkingResponse res =  //         await CollaborationRepository().getStudent(batch);  //     if (res.success == true) {  //       _batchStudent = res;  //       notifyListeners();  //       print("RESPONSE:::${_batchStudent.students}");  //  //       _batchStudentApiResponse =  //           ApiResponse.completed(res.success.toString());  //       notifyListeners();  //     } else {  //       _batchStudentApiResponse =  //           ApiResponse.error(res.success.toString());  //     }  //   } catch (e) {  //     print("VM CATCH ERRe :: $e");  //     _batchStudentApiResponse = ApiResponse.error(e.toString());  //   }  //   notifyListeners();  // }  ApiResponse _allTaskApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get allTaskApiResponse => _allTaskApiResponse;  CollaborationTaskGroup _allTask = CollaborationTaskGroup();  CollaborationTaskGroup get allTask => _allTask;  Future<void> fetchAllTask(String id) async {    _allTaskApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      CollaborationTaskGroup res =          await CollaborationRepository().getAllTask(id);      if (res.success == true) {        _allTask = res;        _allTaskApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _allTaskApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _allTaskApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _assignmentBatchApiResponse =      ApiResponse.initial("Empty Data");  ApiResponse get assignmentBatchApiResponse =>      _assignmentBatchApiResponse;  GetBatchResponse _assignmentBatch = GetBatchResponse();  GetBatchResponse get assignmentBatch => _assignmentBatch;  Future<void> fetchAssignmentBatch(String id) async {    _assignmentBatchApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      GetBatchResponse res =          await CollaborationRepository().getAssignmentBatch(id);      if (res.success == true) {        _assignmentBatch = res;        _assignmentBatchApiResponse =            ApiResponse.completed(res.success.toString());        notifyListeners();      } else {        _assignmentBatchApiResponse =            ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERRe :: $e");      _assignmentBatchApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }}