import 'dart:convert';import 'package:file_picker/file_picker.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:html_editor_enhanced/html_editor.dart';import 'package:loader_overlay/loader_overlay.dart';import 'package:multi_select_flutter/dialog/multi_select_dialog_field.dart';import 'package:multi_select_flutter/util/multi_select_item.dart';import 'package:multi_select_flutter/util/multi_select_list_type.dart';import 'package:date_time_picker/date_time_picker.dart';import 'package:schoolworkspro_app/api/repositories/collaboration_repo.dart';import 'package:schoolworkspro_app/constants/colors.dart';import 'package:schoolworkspro_app/response/create_task_response.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../constants.dart';import '../../../response/authenticateduser_response.dart';import '../../widgets/snack_bar.dart';class CreateTaskScreen extends StatefulWidget {  dynamic groupId;  CreateTaskScreen({Key? key, required this.groupId})      : super(key: key);  @override  State<CreateTaskScreen> createState() => _CreateTaskScreenState();}class _CreateTaskScreenState extends State<CreateTaskScreen> {  late TextEditingController _taskTitleController;  TextEditingController dateController = TextEditingController();  final TextEditingController _descriptionController =      TextEditingController();  final HtmlEditorController detailsController =      HtmlEditorController();  DateTime? duedate;  bool isloading = false;  List<String> students = <String>[];  User? user;  List<String> selectedStudents = <String>[];  @override  void initState() {    // print("batches::::${widget.groupId["assignedToList"]["assignedTo"]["batch"]}");    duedate = widget.groupId["isUpdate"] ? DateTime.parse(widget.groupId["assignedToList"]["createdAt"]) : null;    _taskTitleController = widget.groupId["isUpdate"]        ? TextEditingController(        text: widget.groupId["assignedToList"]["title"])        : TextEditingController();    // selectedStudents = widget.groupId["isUpdate"]    //     ? widget.groupId["assignedToList"]["assignedTo"]    //     : [];    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      getUser();    });    super.initState();  }  getUser() async {    SharedPreferences sharedPreferences =        await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('_auth_');    Map<String, dynamic> userMap = json.decode(userData!);    User userD = User.fromJson(userMap);    setState(() {      user = userD;    });  }  @override  Widget build(BuildContext context) {    if (isloading == true) {      context.loaderOverlay.show();    } else {      context.loaderOverlay.hide();    }    return Scaffold(        appBar: AppBar(          backgroundColor: logoTheme,          elevation: 1,          centerTitle: false,          title: Text(            "Create a task",            style: TextStyle(                color: white,                fontWeight: FontWeight.w600,                fontSize: 20),              overflow: TextOverflow.ellipsis            // bS12W4.copyWith(            //     fontWeight: kW6,            //     fontSize: font_20,            //     overflow: TextOverflow.ellipsis),          ),          // leading: IconButton(          //   onPressed: () {          //     Navigator.pop(context);          //   },          //   icon: const Icon(          //     Icons.arrow_back_ios,          //     color: black,          //   ),          // ),        ),        body: SafeArea(          child: Padding(            padding: const EdgeInsets.symmetric(                horizontal: 20, vertical: 20),            child: SingleChildScrollView(                child: Column(              mainAxisAlignment: MainAxisAlignment.start,              crossAxisAlignment: CrossAxisAlignment.start,              children: [                const Text("Title"),                const SizedBox(                  height: 5,                ),                TextFormField(                  validator: (text1) {                    if (text1 == null || text1.isEmpty) {                      return 'Please enter title';                    }                    return null;                  },                  controller: _taskTitleController,                  keyboardType: TextInputType.visiblePassword,                  decoration: InputDecoration(                    hintText: widget.groupId["isUpdate"]                        ? widget.groupId["assignedToList"]["title"]                        : '# Task 1',                    filled: true,                    enabledBorder: OutlineInputBorder(                        borderSide: BorderSide(color: kPrimaryColor)),                    focusedBorder: const OutlineInputBorder(                        borderSide: BorderSide(color: Colors.green)),                  ),                ),                const SizedBox(                  height: 10,                ),                const Text("Details"),                const SizedBox(                  height: 5,                ),                HtmlEditor(                  controller: detailsController,                  htmlEditorOptions: HtmlEditorOptions(                    // hint: "Your text here...",                    hint: widget.groupId["isUpdate"]                        ? widget.groupId["assignedToList"]["detail"]                        : "Your text here...",                    initialText: widget.groupId["isUpdate"]                        ? widget.groupId["assignedToList"]["detail"]                        : "",                  ),                  htmlToolbarOptions: HtmlToolbarOptions(                    initiallyExpanded: true,                    toolbarPosition: ToolbarPosition.aboveEditor,                    toolbarType: ToolbarType.nativeScrollable,                    mediaLinkInsertInterceptor:                        (String url, InsertFileType type) {                      return true;                    },                    mediaUploadInterceptor: (PlatformFile file,                        InsertFileType type) async {                      return true;                    },                  ),                  // otherOptions: OtherOptions(height: 300),                ),                const SizedBox(                  height: 10,                ),                const Text('Assigned to'),                const SizedBox(                  height: 5,                ),                Builder(                  builder: (context) {                    return MultiSelectDialogField(                      items: widget.groupId["users"]                          .map<MultiSelectItem<String>>((e) =>                              MultiSelectItem(e["_id"].toString(),                                  e["username"].toString()))                          .toList(),                      // initialValue: selectedStudents,                      // widget.groupId["isUpdate"]                      //     ? selectedStudents                      //     : [],                      listType: MultiSelectListType.CHIP,                      autovalidateMode: AutovalidateMode.always,                      onConfirm: (List<String> values) {                        setState(() {                          students = (values.toSet()).toList();                        });                      },                    );                  }                ),                const SizedBox(                  height: 10,                ),                const Text('Date'),                const SizedBox(                  height: 5,                ),                Container(                  decoration: BoxDecoration(                    border: Border.all(color: Colors.grey, width: 1),                    borderRadius: BorderRadius.circular(5),                  ),                  child: DateTimePicker(                    type: DateTimePickerType.date,                    dateMask: 'd MMM, yyyy',                    initialValue: widget.groupId["isUpdate"] ? widget.groupId["assignedToList"]["createdAt"] : DateTime.now().toString(),                    firstDate: DateTime(2000),                    lastDate: DateTime(2100),                    icon: const Icon(Icons.event),                    dateLabelText: 'Date',                    timeLabelText: "Hour",                    timePickerEntryModeInput: true,                    onChanged: (val) {                      setState(() {                        duedate = DateTime.parse(val);                      });                    },                    validator: (val) {                      return null;                    },                  ),                ),                Padding(                  padding: const EdgeInsets.symmetric(horizontal: 20),                  child: Row(                    mainAxisAlignment: MainAxisAlignment.center,                    crossAxisAlignment: CrossAxisAlignment.center,                    children: <Widget>[                      Expanded(                        child: Padding(                          padding: const EdgeInsets.only(top: 15.0),                          child: SizedBox(                            height: 40,                            // width: 60,                            child: ElevatedButton(                              style: ButtonStyle(                                  backgroundColor:                                      MaterialStateProperty.all(                                          logoTheme),                                  shape: MaterialStateProperty.all<                                          RoundedRectangleBorder>(                                      RoundedRectangleBorder(                                    borderRadius:                                        BorderRadius.circular(4.0),                                  ))),                              onPressed: () async {                                try {                                  if (_taskTitleController.text.isEmpty) {                                    Fluttertoast.showToast(                                        msg: 'Please enter all fields');                                  } else if (duedate == null) {                                    Fluttertoast.showToast(                                        msg: "Date can't be empty");                                  } else {                                    setState(() {                                      isloading = true;                                    });                                    var content =                                        await detailsController.getText();                                    String request = jsonEncode({                                      "title": _taskTitleController.text,                                      "date": duedate.toString(),                                      "detail": content,                                      "assignedTo": (students.toSet()).toList(),                                      // "username": user!.username.toString(),                                    });                                    CreateTaskResponse res =                                        await CollaborationRepository()                                            .createTaskGroup(                                                widget.groupId["isUpdate"] ? widget.groupId["assignedToList"]["_id"] : widget.groupId["keyId"],                                                request, widget.groupId["isUpdate"]);                                    if (res.success == true) {                                      setState(() {                                        isloading = true;                                      });                                      Navigator.of(context).pop();                                      _taskTitleController.clear();                                      _descriptionController.clear();                                      snackThis(                                          context: context,                                          content: const Text(                                              "Task Created successfully"),                                          color: Colors.green,                                          duration: 1,                                          behavior:                                              SnackBarBehavior.floating);                                      setState(() {                                        isloading = false;                                      });                                    }                                    else {                                      setState(() {                                        isloading = true;                                      });                                      snackThis(                                          context: context,                                          content: const Text(                                              "Task Created failed"),                                          color: Colors.red,                                          duration: 1,                                          behavior:                                              SnackBarBehavior.floating);                                      setState(() {                                        isloading = false;                                      });                                    }                                  }                                } catch (e) {                                  setState(() {                                    isloading = true;                                  });                                  print("ERRORR::$e");                                  snackThis(                                      context: context,                                      content: Text(e.toString()),                                      color: Colors.red,                                      duration: 1,                                      behavior:                                          SnackBarBehavior.floating);                                  setState(() {                                    isloading = false;                                  });                                }                              },                              child: Text( widget.groupId["isUpdate"] ? "Update" :"Add",                                  style: TextStyle(                                      fontSize: 14, color: white)),                            ),                          ),                        ),                      ),                      SizedBox(                        width: 15,                      ),                      Expanded(                        child: Padding(                          padding: const EdgeInsets.only(top: 15.0),                          child: SizedBox(                            height: 40,                            // width: 80,                            child: ElevatedButton(                              onPressed: () async {                                Navigator.pop(context);                              },                              style: ButtonStyle(                                  backgroundColor:                                      MaterialStateProperty.all(                                          Colors.amber),                                  shape: MaterialStateProperty.all<                                          RoundedRectangleBorder>(                                      RoundedRectangleBorder(                                    borderRadius:                                        BorderRadius.circular(4.0),                                  ))),                              child: const Text(                                "Cancel",                                style:                                    TextStyle(fontSize: 14, color: black),                              ),                            ),                          ),                        ),                      )                    ],                  ),                ),                const SizedBox(                  height: 30,                ),              ],            )),          ),        ));  }}